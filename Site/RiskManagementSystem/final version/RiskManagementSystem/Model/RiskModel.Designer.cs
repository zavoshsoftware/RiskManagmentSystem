//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_Acts_Operations", "Operations", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiskManagementSystem.Model.Operations), "Acts", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.Acts), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_Operations_OperationGroups", "OperationGroups", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiskManagementSystem.Model.OperationGroups), "Operations", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.Operations), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_RiskDesicion_RiskEvaluations", "RiskEvaluations", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiskManagementSystem.Model.RiskEvaluations), "RiskDesicions", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.RiskDesicions), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_RiskDesicion_RiskEvaluations1", "RiskEvaluations", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiskManagementSystem.Model.RiskEvaluations), "RiskDesicions", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.RiskDesicions), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_RiskEvaluations_RiskIntensities", "RiskIntensities", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiskManagementSystem.Model.RiskIntensities), "RiskEvaluations", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.RiskEvaluations), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_RiskEvaluations_RiskProbabilities", "RiskProbabilities", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiskManagementSystem.Model.RiskProbabilities), "RiskEvaluations", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.RiskEvaluations), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_ControlingWorks_Risks", "Risks", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiskManagementSystem.Model.Risks), "ControlingWorks", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.ControlingWorks), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_Risks_RiskIntensities", "RiskIntensities", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(RiskManagementSystem.Model.RiskIntensities), "Risks", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.Risks), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_Risks_RiskProbabilities", "RiskProbabilities", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(RiskManagementSystem.Model.RiskProbabilities), "Risks", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.Risks), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_Files_FileGroups", "FileGroups", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiskManagementSystem.Model.FileGroups), "Files", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.Files), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_Stages_Acts", "Acts", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiskManagementSystem.Model.Acts), "Stages", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.Stages), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_Risks_Stages", "Stages", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiskManagementSystem.Model.Stages), "Risks", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.Risks), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_Users_Roles", "Roles", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiskManagementSystem.Model.Roles), "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.Users), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_Users_Users", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(RiskManagementSystem.Model.Users), "Users1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.Users), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_UserRisks_RiskIntensities", "RiskIntensities", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiskManagementSystem.Model.RiskIntensities), "UserRisks", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.UserRisks), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_UserRisks_RiskIntensities1", "RiskIntensities", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(RiskManagementSystem.Model.RiskIntensities), "UserRisks", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.UserRisks), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_UserRisks_RiskProbabilities", "RiskProbabilities", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiskManagementSystem.Model.RiskProbabilities), "UserRisks", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.UserRisks), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_UserRisks_RiskProbabilities1", "RiskProbabilities", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(RiskManagementSystem.Model.RiskProbabilities), "UserRisks", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.UserRisks), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_UserRisks_Risks", "Risks", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiskManagementSystem.Model.Risks), "UserRisks", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.UserRisks), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_UserRisks_Users", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(RiskManagementSystem.Model.Users), "UserRisks", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.UserRisks), true)]
[assembly: EdmRelationshipAttribute("RiskManagementModel", "FK_UserRisks_Users1", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(RiskManagementSystem.Model.Users), "UserRisks", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(RiskManagementSystem.Model.UserRisks), true)]

#endregion

namespace RiskManagementSystem.Model
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class RiskManagementEntities : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new RiskManagementEntities object using the connection string found in the 'RiskManagementEntities' section of the application configuration file.
        /// </summary>
        public RiskManagementEntities() : base("name=RiskManagementEntities", "RiskManagementEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new RiskManagementEntities object.
        /// </summary>
        public RiskManagementEntities(string connectionString) : base(connectionString, "RiskManagementEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new RiskManagementEntities object.
        /// </summary>
        public RiskManagementEntities(EntityConnection connection) : base(connection, "RiskManagementEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Acts> Acts
        {
            get
            {
                if ((_Acts == null))
                {
                    _Acts = base.CreateObjectSet<Acts>("Acts");
                }
                return _Acts;
            }
        }
        private ObjectSet<Acts> _Acts;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ControlingWorks> ControlingWorks
        {
            get
            {
                if ((_ControlingWorks == null))
                {
                    _ControlingWorks = base.CreateObjectSet<ControlingWorks>("ControlingWorks");
                }
                return _ControlingWorks;
            }
        }
        private ObjectSet<ControlingWorks> _ControlingWorks;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<OperationGroups> OperationGroups
        {
            get
            {
                if ((_OperationGroups == null))
                {
                    _OperationGroups = base.CreateObjectSet<OperationGroups>("OperationGroups");
                }
                return _OperationGroups;
            }
        }
        private ObjectSet<OperationGroups> _OperationGroups;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Operations> Operations
        {
            get
            {
                if ((_Operations == null))
                {
                    _Operations = base.CreateObjectSet<Operations>("Operations");
                }
                return _Operations;
            }
        }
        private ObjectSet<Operations> _Operations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RiskDesicions> RiskDesicions
        {
            get
            {
                if ((_RiskDesicions == null))
                {
                    _RiskDesicions = base.CreateObjectSet<RiskDesicions>("RiskDesicions");
                }
                return _RiskDesicions;
            }
        }
        private ObjectSet<RiskDesicions> _RiskDesicions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RiskEvaluations> RiskEvaluations
        {
            get
            {
                if ((_RiskEvaluations == null))
                {
                    _RiskEvaluations = base.CreateObjectSet<RiskEvaluations>("RiskEvaluations");
                }
                return _RiskEvaluations;
            }
        }
        private ObjectSet<RiskEvaluations> _RiskEvaluations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RiskIntensities> RiskIntensities
        {
            get
            {
                if ((_RiskIntensities == null))
                {
                    _RiskIntensities = base.CreateObjectSet<RiskIntensities>("RiskIntensities");
                }
                return _RiskIntensities;
            }
        }
        private ObjectSet<RiskIntensities> _RiskIntensities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<RiskProbabilities> RiskProbabilities
        {
            get
            {
                if ((_RiskProbabilities == null))
                {
                    _RiskProbabilities = base.CreateObjectSet<RiskProbabilities>("RiskProbabilities");
                }
                return _RiskProbabilities;
            }
        }
        private ObjectSet<RiskProbabilities> _RiskProbabilities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Roles> Roles
        {
            get
            {
                if ((_Roles == null))
                {
                    _Roles = base.CreateObjectSet<Roles>("Roles");
                }
                return _Roles;
            }
        }
        private ObjectSet<Roles> _Roles;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Risks> Risks
        {
            get
            {
                if ((_Risks == null))
                {
                    _Risks = base.CreateObjectSet<Risks>("Risks");
                }
                return _Risks;
            }
        }
        private ObjectSet<Risks> _Risks;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<FileGroups> FileGroups
        {
            get
            {
                if ((_FileGroups == null))
                {
                    _FileGroups = base.CreateObjectSet<FileGroups>("FileGroups");
                }
                return _FileGroups;
            }
        }
        private ObjectSet<FileGroups> _FileGroups;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Files> Files
        {
            get
            {
                if ((_Files == null))
                {
                    _Files = base.CreateObjectSet<Files>("Files");
                }
                return _Files;
            }
        }
        private ObjectSet<Files> _Files;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Stages> Stages
        {
            get
            {
                if ((_Stages == null))
                {
                    _Stages = base.CreateObjectSet<Stages>("Stages");
                }
                return _Stages;
            }
        }
        private ObjectSet<Stages> _Stages;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Users> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<Users>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<Users> _Users;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<UserRisks> UserRisks
        {
            get
            {
                if ((_UserRisks == null))
                {
                    _UserRisks = base.CreateObjectSet<UserRisks>("UserRisks");
                }
                return _UserRisks;
            }
        }
        private ObjectSet<UserRisks> _UserRisks;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Acts EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToActs(Acts acts)
        {
            base.AddObject("Acts", acts);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ControlingWorks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToControlingWorks(ControlingWorks controlingWorks)
        {
            base.AddObject("ControlingWorks", controlingWorks);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the OperationGroups EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToOperationGroups(OperationGroups operationGroups)
        {
            base.AddObject("OperationGroups", operationGroups);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Operations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToOperations(Operations operations)
        {
            base.AddObject("Operations", operations);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RiskDesicions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRiskDesicions(RiskDesicions riskDesicions)
        {
            base.AddObject("RiskDesicions", riskDesicions);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RiskEvaluations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRiskEvaluations(RiskEvaluations riskEvaluations)
        {
            base.AddObject("RiskEvaluations", riskEvaluations);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RiskIntensities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRiskIntensities(RiskIntensities riskIntensities)
        {
            base.AddObject("RiskIntensities", riskIntensities);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the RiskProbabilities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRiskProbabilities(RiskProbabilities riskProbabilities)
        {
            base.AddObject("RiskProbabilities", riskProbabilities);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Roles EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRoles(Roles roles)
        {
            base.AddObject("Roles", roles);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Risks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRisks(Risks risks)
        {
            base.AddObject("Risks", risks);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the FileGroups EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFileGroups(FileGroups fileGroups)
        {
            base.AddObject("FileGroups", fileGroups);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Files EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToFiles(Files files)
        {
            base.AddObject("Files", files);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Stages EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStages(Stages stages)
        {
            base.AddObject("Stages", stages);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Users EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUsers(Users users)
        {
            base.AddObject("Users", users);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the UserRisks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToUserRisks(UserRisks userRisks)
        {
            base.AddObject("UserRisks", userRisks);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiskManagementModel", Name="Acts")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Acts : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Acts object.
        /// </summary>
        /// <param name="actID">Initial value of the ActID property.</param>
        /// <param name="operationID">Initial value of the OperationID property.</param>
        /// <param name="codeID">Initial value of the CodeID property.</param>
        /// <param name="actTitle">Initial value of the ActTitle property.</param>
        public static Acts CreateActs(global::System.Int32 actID, global::System.Int32 operationID, global::System.Int32 codeID, global::System.String actTitle)
        {
            Acts acts = new Acts();
            acts.ActID = actID;
            acts.OperationID = operationID;
            acts.CodeID = codeID;
            acts.ActTitle = actTitle;
            return acts;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ActID
        {
            get
            {
                return _ActID;
            }
            set
            {
                if (_ActID != value)
                {
                    OnActIDChanging(value);
                    ReportPropertyChanging("ActID");
                    _ActID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ActID");
                    OnActIDChanged();
                }
            }
        }
        private global::System.Int32 _ActID;
        partial void OnActIDChanging(global::System.Int32 value);
        partial void OnActIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OperationID
        {
            get
            {
                return _OperationID;
            }
            set
            {
                OnOperationIDChanging(value);
                ReportPropertyChanging("OperationID");
                _OperationID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OperationID");
                OnOperationIDChanged();
            }
        }
        private global::System.Int32 _OperationID;
        partial void OnOperationIDChanging(global::System.Int32 value);
        partial void OnOperationIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CodeID
        {
            get
            {
                return _CodeID;
            }
            set
            {
                OnCodeIDChanging(value);
                ReportPropertyChanging("CodeID");
                _CodeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CodeID");
                OnCodeIDChanged();
            }
        }
        private global::System.Int32 _CodeID;
        partial void OnCodeIDChanging(global::System.Int32 value);
        partial void OnCodeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ActTitle
        {
            get
            {
                return _ActTitle;
            }
            set
            {
                OnActTitleChanging(value);
                ReportPropertyChanging("ActTitle");
                _ActTitle = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ActTitle");
                OnActTitleChanged();
            }
        }
        private global::System.String _ActTitle;
        partial void OnActTitleChanging(global::System.String value);
        partial void OnActTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ProtectionEQP
        {
            get
            {
                return _ProtectionEQP;
            }
            set
            {
                OnProtectionEQPChanging(value);
                ReportPropertyChanging("ProtectionEQP");
                _ProtectionEQP = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ProtectionEQP");
                OnProtectionEQPChanged();
            }
        }
        private global::System.String _ProtectionEQP;
        partial void OnProtectionEQPChanging(global::System.String value);
        partial void OnProtectionEQPChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Curses
        {
            get
            {
                return _Curses;
            }
            set
            {
                OnCursesChanging(value);
                ReportPropertyChanging("Curses");
                _Curses = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Curses");
                OnCursesChanged();
            }
        }
        private global::System.String _Curses;
        partial void OnCursesChanging(global::System.String value);
        partial void OnCursesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsAcceptedByAdmin
        {
            get
            {
                return _IsAcceptedByAdmin;
            }
            set
            {
                OnIsAcceptedByAdminChanging(value);
                ReportPropertyChanging("IsAcceptedByAdmin");
                _IsAcceptedByAdmin = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsAcceptedByAdmin");
                OnIsAcceptedByAdminChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsAcceptedByAdmin;
        partial void OnIsAcceptedByAdminChanging(Nullable<global::System.Boolean> value);
        partial void OnIsAcceptedByAdminChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_Acts_Operations", "Operations")]
        public Operations Operations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Operations>("RiskManagementModel.FK_Acts_Operations", "Operations").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Operations>("RiskManagementModel.FK_Acts_Operations", "Operations").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Operations> OperationsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Operations>("RiskManagementModel.FK_Acts_Operations", "Operations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Operations>("RiskManagementModel.FK_Acts_Operations", "Operations", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_Stages_Acts", "Stages")]
        public EntityCollection<Stages> Stages
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Stages>("RiskManagementModel.FK_Stages_Acts", "Stages");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Stages>("RiskManagementModel.FK_Stages_Acts", "Stages", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiskManagementModel", Name="ControlingWorks")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ControlingWorks : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ControlingWorks object.
        /// </summary>
        /// <param name="controlID">Initial value of the ControlID property.</param>
        /// <param name="riskID">Initial value of the RiskID property.</param>
        /// <param name="controlTitle">Initial value of the ControlTitle property.</param>
        /// <param name="codeID">Initial value of the CodeID property.</param>
        public static ControlingWorks CreateControlingWorks(global::System.Int32 controlID, global::System.Int32 riskID, global::System.String controlTitle, global::System.Int32 codeID)
        {
            ControlingWorks controlingWorks = new ControlingWorks();
            controlingWorks.ControlID = controlID;
            controlingWorks.RiskID = riskID;
            controlingWorks.ControlTitle = controlTitle;
            controlingWorks.CodeID = codeID;
            return controlingWorks;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ControlID
        {
            get
            {
                return _ControlID;
            }
            set
            {
                if (_ControlID != value)
                {
                    OnControlIDChanging(value);
                    ReportPropertyChanging("ControlID");
                    _ControlID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ControlID");
                    OnControlIDChanged();
                }
            }
        }
        private global::System.Int32 _ControlID;
        partial void OnControlIDChanging(global::System.Int32 value);
        partial void OnControlIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RiskID
        {
            get
            {
                return _RiskID;
            }
            set
            {
                OnRiskIDChanging(value);
                ReportPropertyChanging("RiskID");
                _RiskID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RiskID");
                OnRiskIDChanged();
            }
        }
        private global::System.Int32 _RiskID;
        partial void OnRiskIDChanging(global::System.Int32 value);
        partial void OnRiskIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ControlTitle
        {
            get
            {
                return _ControlTitle;
            }
            set
            {
                OnControlTitleChanging(value);
                ReportPropertyChanging("ControlTitle");
                _ControlTitle = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ControlTitle");
                OnControlTitleChanged();
            }
        }
        private global::System.String _ControlTitle;
        partial void OnControlTitleChanging(global::System.String value);
        partial void OnControlTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CodeID
        {
            get
            {
                return _CodeID;
            }
            set
            {
                OnCodeIDChanging(value);
                ReportPropertyChanging("CodeID");
                _CodeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CodeID");
                OnCodeIDChanged();
            }
        }
        private global::System.Int32 _CodeID;
        partial void OnCodeIDChanging(global::System.Int32 value);
        partial void OnCodeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsAcceptedByAdmin
        {
            get
            {
                return _IsAcceptedByAdmin;
            }
            set
            {
                OnIsAcceptedByAdminChanging(value);
                ReportPropertyChanging("IsAcceptedByAdmin");
                _IsAcceptedByAdmin = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsAcceptedByAdmin");
                OnIsAcceptedByAdminChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsAcceptedByAdmin;
        partial void OnIsAcceptedByAdminChanging(Nullable<global::System.Boolean> value);
        partial void OnIsAcceptedByAdminChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_ControlingWorks_Risks", "Risks")]
        public Risks Risks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Risks>("RiskManagementModel.FK_ControlingWorks_Risks", "Risks").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Risks>("RiskManagementModel.FK_ControlingWorks_Risks", "Risks").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Risks> RisksReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Risks>("RiskManagementModel.FK_ControlingWorks_Risks", "Risks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Risks>("RiskManagementModel.FK_ControlingWorks_Risks", "Risks", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiskManagementModel", Name="FileGroups")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FileGroups : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new FileGroups object.
        /// </summary>
        /// <param name="fileGroupID">Initial value of the FileGroupID property.</param>
        /// <param name="fileGroupTitle">Initial value of the FileGroupTitle property.</param>
        public static FileGroups CreateFileGroups(global::System.Int32 fileGroupID, global::System.String fileGroupTitle)
        {
            FileGroups fileGroups = new FileGroups();
            fileGroups.FileGroupID = fileGroupID;
            fileGroups.FileGroupTitle = fileGroupTitle;
            return fileGroups;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FileGroupID
        {
            get
            {
                return _FileGroupID;
            }
            set
            {
                if (_FileGroupID != value)
                {
                    OnFileGroupIDChanging(value);
                    ReportPropertyChanging("FileGroupID");
                    _FileGroupID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FileGroupID");
                    OnFileGroupIDChanged();
                }
            }
        }
        private global::System.Int32 _FileGroupID;
        partial void OnFileGroupIDChanging(global::System.Int32 value);
        partial void OnFileGroupIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FileGroupTitle
        {
            get
            {
                return _FileGroupTitle;
            }
            set
            {
                OnFileGroupTitleChanging(value);
                ReportPropertyChanging("FileGroupTitle");
                _FileGroupTitle = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FileGroupTitle");
                OnFileGroupTitleChanged();
            }
        }
        private global::System.String _FileGroupTitle;
        partial void OnFileGroupTitleChanging(global::System.String value);
        partial void OnFileGroupTitleChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_Files_FileGroups", "Files")]
        public EntityCollection<Files> Files
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Files>("RiskManagementModel.FK_Files_FileGroups", "Files");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Files>("RiskManagementModel.FK_Files_FileGroups", "Files", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiskManagementModel", Name="Files")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Files : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Files object.
        /// </summary>
        /// <param name="fileID">Initial value of the FileID property.</param>
        /// <param name="fileGroupID">Initial value of the FileGroupID property.</param>
        /// <param name="cHName">Initial value of the CHName property.</param>
        /// <param name="gUName">Initial value of the GUName property.</param>
        /// <param name="rGName">Initial value of the RGName property.</param>
        public static Files CreateFiles(global::System.Int32 fileID, global::System.Int32 fileGroupID, global::System.String cHName, global::System.String gUName, global::System.String rGName)
        {
            Files files = new Files();
            files.FileID = fileID;
            files.FileGroupID = fileGroupID;
            files.CHName = cHName;
            files.GUName = gUName;
            files.RGName = rGName;
            return files;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FileID
        {
            get
            {
                return _FileID;
            }
            set
            {
                if (_FileID != value)
                {
                    OnFileIDChanging(value);
                    ReportPropertyChanging("FileID");
                    _FileID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FileID");
                    OnFileIDChanged();
                }
            }
        }
        private global::System.Int32 _FileID;
        partial void OnFileIDChanging(global::System.Int32 value);
        partial void OnFileIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FileGroupID
        {
            get
            {
                return _FileGroupID;
            }
            set
            {
                OnFileGroupIDChanging(value);
                ReportPropertyChanging("FileGroupID");
                _FileGroupID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FileGroupID");
                OnFileGroupIDChanged();
            }
        }
        private global::System.Int32 _FileGroupID;
        partial void OnFileGroupIDChanging(global::System.Int32 value);
        partial void OnFileGroupIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CHName
        {
            get
            {
                return _CHName;
            }
            set
            {
                OnCHNameChanging(value);
                ReportPropertyChanging("CHName");
                _CHName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CHName");
                OnCHNameChanged();
            }
        }
        private global::System.String _CHName;
        partial void OnCHNameChanging(global::System.String value);
        partial void OnCHNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GUName
        {
            get
            {
                return _GUName;
            }
            set
            {
                OnGUNameChanging(value);
                ReportPropertyChanging("GUName");
                _GUName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("GUName");
                OnGUNameChanged();
            }
        }
        private global::System.String _GUName;
        partial void OnGUNameChanging(global::System.String value);
        partial void OnGUNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RGName
        {
            get
            {
                return _RGName;
            }
            set
            {
                OnRGNameChanging(value);
                ReportPropertyChanging("RGName");
                _RGName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RGName");
                OnRGNameChanged();
            }
        }
        private global::System.String _RGName;
        partial void OnRGNameChanging(global::System.String value);
        partial void OnRGNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_Files_FileGroups", "FileGroups")]
        public FileGroups FileGroups
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FileGroups>("RiskManagementModel.FK_Files_FileGroups", "FileGroups").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FileGroups>("RiskManagementModel.FK_Files_FileGroups", "FileGroups").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<FileGroups> FileGroupsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FileGroups>("RiskManagementModel.FK_Files_FileGroups", "FileGroups");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<FileGroups>("RiskManagementModel.FK_Files_FileGroups", "FileGroups", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiskManagementModel", Name="OperationGroups")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class OperationGroups : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new OperationGroups object.
        /// </summary>
        /// <param name="operationGroupID">Initial value of the OperationGroupID property.</param>
        /// <param name="operationGroupTitle">Initial value of the OperationGroupTitle property.</param>
        public static OperationGroups CreateOperationGroups(global::System.Int32 operationGroupID, global::System.String operationGroupTitle)
        {
            OperationGroups operationGroups = new OperationGroups();
            operationGroups.OperationGroupID = operationGroupID;
            operationGroups.OperationGroupTitle = operationGroupTitle;
            return operationGroups;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OperationGroupID
        {
            get
            {
                return _OperationGroupID;
            }
            set
            {
                if (_OperationGroupID != value)
                {
                    OnOperationGroupIDChanging(value);
                    ReportPropertyChanging("OperationGroupID");
                    _OperationGroupID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("OperationGroupID");
                    OnOperationGroupIDChanged();
                }
            }
        }
        private global::System.Int32 _OperationGroupID;
        partial void OnOperationGroupIDChanging(global::System.Int32 value);
        partial void OnOperationGroupIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String OperationGroupTitle
        {
            get
            {
                return _OperationGroupTitle;
            }
            set
            {
                OnOperationGroupTitleChanging(value);
                ReportPropertyChanging("OperationGroupTitle");
                _OperationGroupTitle = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("OperationGroupTitle");
                OnOperationGroupTitleChanged();
            }
        }
        private global::System.String _OperationGroupTitle;
        partial void OnOperationGroupTitleChanging(global::System.String value);
        partial void OnOperationGroupTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String OperationGroupName
        {
            get
            {
                return _OperationGroupName;
            }
            set
            {
                OnOperationGroupNameChanging(value);
                ReportPropertyChanging("OperationGroupName");
                _OperationGroupName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("OperationGroupName");
                OnOperationGroupNameChanged();
            }
        }
        private global::System.String _OperationGroupName;
        partial void OnOperationGroupNameChanging(global::System.String value);
        partial void OnOperationGroupNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_Operations_OperationGroups", "Operations")]
        public EntityCollection<Operations> Operations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Operations>("RiskManagementModel.FK_Operations_OperationGroups", "Operations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Operations>("RiskManagementModel.FK_Operations_OperationGroups", "Operations", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiskManagementModel", Name="Operations")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Operations : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Operations object.
        /// </summary>
        /// <param name="operationID">Initial value of the OperationID property.</param>
        /// <param name="operationGroupID">Initial value of the OperationGroupID property.</param>
        /// <param name="codeID">Initial value of the CodeID property.</param>
        /// <param name="operationTitle">Initial value of the OperationTitle property.</param>
        public static Operations CreateOperations(global::System.Int32 operationID, global::System.Int32 operationGroupID, global::System.Int32 codeID, global::System.String operationTitle)
        {
            Operations operations = new Operations();
            operations.OperationID = operationID;
            operations.OperationGroupID = operationGroupID;
            operations.CodeID = codeID;
            operations.OperationTitle = operationTitle;
            return operations;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OperationID
        {
            get
            {
                return _OperationID;
            }
            set
            {
                if (_OperationID != value)
                {
                    OnOperationIDChanging(value);
                    ReportPropertyChanging("OperationID");
                    _OperationID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("OperationID");
                    OnOperationIDChanged();
                }
            }
        }
        private global::System.Int32 _OperationID;
        partial void OnOperationIDChanging(global::System.Int32 value);
        partial void OnOperationIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OperationGroupID
        {
            get
            {
                return _OperationGroupID;
            }
            set
            {
                OnOperationGroupIDChanging(value);
                ReportPropertyChanging("OperationGroupID");
                _OperationGroupID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OperationGroupID");
                OnOperationGroupIDChanged();
            }
        }
        private global::System.Int32 _OperationGroupID;
        partial void OnOperationGroupIDChanging(global::System.Int32 value);
        partial void OnOperationGroupIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CodeID
        {
            get
            {
                return _CodeID;
            }
            set
            {
                OnCodeIDChanging(value);
                ReportPropertyChanging("CodeID");
                _CodeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CodeID");
                OnCodeIDChanged();
            }
        }
        private global::System.Int32 _CodeID;
        partial void OnCodeIDChanging(global::System.Int32 value);
        partial void OnCodeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String OperationTitle
        {
            get
            {
                return _OperationTitle;
            }
            set
            {
                OnOperationTitleChanging(value);
                ReportPropertyChanging("OperationTitle");
                _OperationTitle = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("OperationTitle");
                OnOperationTitleChanged();
            }
        }
        private global::System.String _OperationTitle;
        partial void OnOperationTitleChanging(global::System.String value);
        partial void OnOperationTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsAcceptedByAdmin
        {
            get
            {
                return _IsAcceptedByAdmin;
            }
            set
            {
                OnIsAcceptedByAdminChanging(value);
                ReportPropertyChanging("IsAcceptedByAdmin");
                _IsAcceptedByAdmin = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsAcceptedByAdmin");
                OnIsAcceptedByAdminChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsAcceptedByAdmin;
        partial void OnIsAcceptedByAdminChanging(Nullable<global::System.Boolean> value);
        partial void OnIsAcceptedByAdminChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_Acts_Operations", "Acts")]
        public EntityCollection<Acts> Acts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Acts>("RiskManagementModel.FK_Acts_Operations", "Acts");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Acts>("RiskManagementModel.FK_Acts_Operations", "Acts", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_Operations_OperationGroups", "OperationGroups")]
        public OperationGroups OperationGroups
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<OperationGroups>("RiskManagementModel.FK_Operations_OperationGroups", "OperationGroups").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<OperationGroups>("RiskManagementModel.FK_Operations_OperationGroups", "OperationGroups").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<OperationGroups> OperationGroupsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<OperationGroups>("RiskManagementModel.FK_Operations_OperationGroups", "OperationGroups");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<OperationGroups>("RiskManagementModel.FK_Operations_OperationGroups", "OperationGroups", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiskManagementModel", Name="RiskDesicions")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RiskDesicions : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RiskDesicions object.
        /// </summary>
        /// <param name="riskDesicionID">Initial value of the RiskDesicionID property.</param>
        /// <param name="startRiskEvaluationID">Initial value of the StartRiskEvaluationID property.</param>
        /// <param name="endRiskEvaluationID">Initial value of the EndRiskEvaluationID property.</param>
        /// <param name="riskDesicionTitle">Initial value of the RiskDesicionTitle property.</param>
        public static RiskDesicions CreateRiskDesicions(global::System.Int32 riskDesicionID, global::System.Int32 startRiskEvaluationID, global::System.Int32 endRiskEvaluationID, global::System.String riskDesicionTitle)
        {
            RiskDesicions riskDesicions = new RiskDesicions();
            riskDesicions.RiskDesicionID = riskDesicionID;
            riskDesicions.StartRiskEvaluationID = startRiskEvaluationID;
            riskDesicions.EndRiskEvaluationID = endRiskEvaluationID;
            riskDesicions.RiskDesicionTitle = riskDesicionTitle;
            return riskDesicions;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RiskDesicionID
        {
            get
            {
                return _RiskDesicionID;
            }
            set
            {
                if (_RiskDesicionID != value)
                {
                    OnRiskDesicionIDChanging(value);
                    ReportPropertyChanging("RiskDesicionID");
                    _RiskDesicionID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RiskDesicionID");
                    OnRiskDesicionIDChanged();
                }
            }
        }
        private global::System.Int32 _RiskDesicionID;
        partial void OnRiskDesicionIDChanging(global::System.Int32 value);
        partial void OnRiskDesicionIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StartRiskEvaluationID
        {
            get
            {
                return _StartRiskEvaluationID;
            }
            set
            {
                OnStartRiskEvaluationIDChanging(value);
                ReportPropertyChanging("StartRiskEvaluationID");
                _StartRiskEvaluationID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartRiskEvaluationID");
                OnStartRiskEvaluationIDChanged();
            }
        }
        private global::System.Int32 _StartRiskEvaluationID;
        partial void OnStartRiskEvaluationIDChanging(global::System.Int32 value);
        partial void OnStartRiskEvaluationIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 EndRiskEvaluationID
        {
            get
            {
                return _EndRiskEvaluationID;
            }
            set
            {
                OnEndRiskEvaluationIDChanging(value);
                ReportPropertyChanging("EndRiskEvaluationID");
                _EndRiskEvaluationID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndRiskEvaluationID");
                OnEndRiskEvaluationIDChanged();
            }
        }
        private global::System.Int32 _EndRiskEvaluationID;
        partial void OnEndRiskEvaluationIDChanging(global::System.Int32 value);
        partial void OnEndRiskEvaluationIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RiskDesicionTitle
        {
            get
            {
                return _RiskDesicionTitle;
            }
            set
            {
                OnRiskDesicionTitleChanging(value);
                ReportPropertyChanging("RiskDesicionTitle");
                _RiskDesicionTitle = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RiskDesicionTitle");
                OnRiskDesicionTitleChanged();
            }
        }
        private global::System.String _RiskDesicionTitle;
        partial void OnRiskDesicionTitleChanging(global::System.String value);
        partial void OnRiskDesicionTitleChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_RiskDesicion_RiskEvaluations", "RiskEvaluations")]
        public RiskEvaluations RiskEvaluations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskEvaluations>("RiskManagementModel.FK_RiskDesicion_RiskEvaluations", "RiskEvaluations").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskEvaluations>("RiskManagementModel.FK_RiskDesicion_RiskEvaluations", "RiskEvaluations").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RiskEvaluations> RiskEvaluationsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskEvaluations>("RiskManagementModel.FK_RiskDesicion_RiskEvaluations", "RiskEvaluations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RiskEvaluations>("RiskManagementModel.FK_RiskDesicion_RiskEvaluations", "RiskEvaluations", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_RiskDesicion_RiskEvaluations1", "RiskEvaluations")]
        public RiskEvaluations RiskEvaluations1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskEvaluations>("RiskManagementModel.FK_RiskDesicion_RiskEvaluations1", "RiskEvaluations").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskEvaluations>("RiskManagementModel.FK_RiskDesicion_RiskEvaluations1", "RiskEvaluations").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RiskEvaluations> RiskEvaluations1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskEvaluations>("RiskManagementModel.FK_RiskDesicion_RiskEvaluations1", "RiskEvaluations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RiskEvaluations>("RiskManagementModel.FK_RiskDesicion_RiskEvaluations1", "RiskEvaluations", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiskManagementModel", Name="RiskEvaluations")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RiskEvaluations : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RiskEvaluations object.
        /// </summary>
        /// <param name="riskEvaluationID">Initial value of the RiskEvaluationID property.</param>
        /// <param name="riskIntensityID">Initial value of the RiskIntensityID property.</param>
        /// <param name="riskProbabilityID">Initial value of the RiskProbabilityID property.</param>
        /// <param name="riskEvaluationNumber">Initial value of the RiskEvaluationNumber property.</param>
        public static RiskEvaluations CreateRiskEvaluations(global::System.Int32 riskEvaluationID, global::System.Int32 riskIntensityID, global::System.Int32 riskProbabilityID, global::System.Int32 riskEvaluationNumber)
        {
            RiskEvaluations riskEvaluations = new RiskEvaluations();
            riskEvaluations.RiskEvaluationID = riskEvaluationID;
            riskEvaluations.RiskIntensityID = riskIntensityID;
            riskEvaluations.RiskProbabilityID = riskProbabilityID;
            riskEvaluations.RiskEvaluationNumber = riskEvaluationNumber;
            return riskEvaluations;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RiskEvaluationID
        {
            get
            {
                return _RiskEvaluationID;
            }
            set
            {
                if (_RiskEvaluationID != value)
                {
                    OnRiskEvaluationIDChanging(value);
                    ReportPropertyChanging("RiskEvaluationID");
                    _RiskEvaluationID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RiskEvaluationID");
                    OnRiskEvaluationIDChanged();
                }
            }
        }
        private global::System.Int32 _RiskEvaluationID;
        partial void OnRiskEvaluationIDChanging(global::System.Int32 value);
        partial void OnRiskEvaluationIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RiskIntensityID
        {
            get
            {
                return _RiskIntensityID;
            }
            set
            {
                OnRiskIntensityIDChanging(value);
                ReportPropertyChanging("RiskIntensityID");
                _RiskIntensityID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RiskIntensityID");
                OnRiskIntensityIDChanged();
            }
        }
        private global::System.Int32 _RiskIntensityID;
        partial void OnRiskIntensityIDChanging(global::System.Int32 value);
        partial void OnRiskIntensityIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RiskProbabilityID
        {
            get
            {
                return _RiskProbabilityID;
            }
            set
            {
                OnRiskProbabilityIDChanging(value);
                ReportPropertyChanging("RiskProbabilityID");
                _RiskProbabilityID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RiskProbabilityID");
                OnRiskProbabilityIDChanged();
            }
        }
        private global::System.Int32 _RiskProbabilityID;
        partial void OnRiskProbabilityIDChanging(global::System.Int32 value);
        partial void OnRiskProbabilityIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RiskEvaluationNumber
        {
            get
            {
                return _RiskEvaluationNumber;
            }
            set
            {
                OnRiskEvaluationNumberChanging(value);
                ReportPropertyChanging("RiskEvaluationNumber");
                _RiskEvaluationNumber = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RiskEvaluationNumber");
                OnRiskEvaluationNumberChanged();
            }
        }
        private global::System.Int32 _RiskEvaluationNumber;
        partial void OnRiskEvaluationNumberChanging(global::System.Int32 value);
        partial void OnRiskEvaluationNumberChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_RiskDesicion_RiskEvaluations", "RiskDesicions")]
        public EntityCollection<RiskDesicions> RiskDesicions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RiskDesicions>("RiskManagementModel.FK_RiskDesicion_RiskEvaluations", "RiskDesicions");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RiskDesicions>("RiskManagementModel.FK_RiskDesicion_RiskEvaluations", "RiskDesicions", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_RiskDesicion_RiskEvaluations1", "RiskDesicions")]
        public EntityCollection<RiskDesicions> RiskDesicions1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RiskDesicions>("RiskManagementModel.FK_RiskDesicion_RiskEvaluations1", "RiskDesicions");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RiskDesicions>("RiskManagementModel.FK_RiskDesicion_RiskEvaluations1", "RiskDesicions", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_RiskEvaluations_RiskIntensities", "RiskIntensities")]
        public RiskIntensities RiskIntensities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskIntensities>("RiskManagementModel.FK_RiskEvaluations_RiskIntensities", "RiskIntensities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskIntensities>("RiskManagementModel.FK_RiskEvaluations_RiskIntensities", "RiskIntensities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RiskIntensities> RiskIntensitiesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskIntensities>("RiskManagementModel.FK_RiskEvaluations_RiskIntensities", "RiskIntensities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RiskIntensities>("RiskManagementModel.FK_RiskEvaluations_RiskIntensities", "RiskIntensities", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_RiskEvaluations_RiskProbabilities", "RiskProbabilities")]
        public RiskProbabilities RiskProbabilities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskProbabilities>("RiskManagementModel.FK_RiskEvaluations_RiskProbabilities", "RiskProbabilities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskProbabilities>("RiskManagementModel.FK_RiskEvaluations_RiskProbabilities", "RiskProbabilities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RiskProbabilities> RiskProbabilitiesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskProbabilities>("RiskManagementModel.FK_RiskEvaluations_RiskProbabilities", "RiskProbabilities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RiskProbabilities>("RiskManagementModel.FK_RiskEvaluations_RiskProbabilities", "RiskProbabilities", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiskManagementModel", Name="RiskIntensities")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RiskIntensities : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RiskIntensities object.
        /// </summary>
        /// <param name="riskIntensityID">Initial value of the RiskIntensityID property.</param>
        /// <param name="riskIntensityTitle">Initial value of the RiskIntensityTitle property.</param>
        /// <param name="riskIntensityLevel">Initial value of the RiskIntensityLevel property.</param>
        /// <param name="riskIntensityDef">Initial value of the RiskIntensityDef property.</param>
        public static RiskIntensities CreateRiskIntensities(global::System.Int32 riskIntensityID, global::System.String riskIntensityTitle, global::System.Int32 riskIntensityLevel, global::System.String riskIntensityDef)
        {
            RiskIntensities riskIntensities = new RiskIntensities();
            riskIntensities.RiskIntensityID = riskIntensityID;
            riskIntensities.RiskIntensityTitle = riskIntensityTitle;
            riskIntensities.RiskIntensityLevel = riskIntensityLevel;
            riskIntensities.RiskIntensityDef = riskIntensityDef;
            return riskIntensities;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RiskIntensityID
        {
            get
            {
                return _RiskIntensityID;
            }
            set
            {
                if (_RiskIntensityID != value)
                {
                    OnRiskIntensityIDChanging(value);
                    ReportPropertyChanging("RiskIntensityID");
                    _RiskIntensityID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RiskIntensityID");
                    OnRiskIntensityIDChanged();
                }
            }
        }
        private global::System.Int32 _RiskIntensityID;
        partial void OnRiskIntensityIDChanging(global::System.Int32 value);
        partial void OnRiskIntensityIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RiskIntensityTitle
        {
            get
            {
                return _RiskIntensityTitle;
            }
            set
            {
                OnRiskIntensityTitleChanging(value);
                ReportPropertyChanging("RiskIntensityTitle");
                _RiskIntensityTitle = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RiskIntensityTitle");
                OnRiskIntensityTitleChanged();
            }
        }
        private global::System.String _RiskIntensityTitle;
        partial void OnRiskIntensityTitleChanging(global::System.String value);
        partial void OnRiskIntensityTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RiskIntensityLevel
        {
            get
            {
                return _RiskIntensityLevel;
            }
            set
            {
                OnRiskIntensityLevelChanging(value);
                ReportPropertyChanging("RiskIntensityLevel");
                _RiskIntensityLevel = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RiskIntensityLevel");
                OnRiskIntensityLevelChanged();
            }
        }
        private global::System.Int32 _RiskIntensityLevel;
        partial void OnRiskIntensityLevelChanging(global::System.Int32 value);
        partial void OnRiskIntensityLevelChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RiskIntensityDef
        {
            get
            {
                return _RiskIntensityDef;
            }
            set
            {
                OnRiskIntensityDefChanging(value);
                ReportPropertyChanging("RiskIntensityDef");
                _RiskIntensityDef = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RiskIntensityDef");
                OnRiskIntensityDefChanged();
            }
        }
        private global::System.String _RiskIntensityDef;
        partial void OnRiskIntensityDefChanging(global::System.String value);
        partial void OnRiskIntensityDefChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_RiskEvaluations_RiskIntensities", "RiskEvaluations")]
        public EntityCollection<RiskEvaluations> RiskEvaluations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RiskEvaluations>("RiskManagementModel.FK_RiskEvaluations_RiskIntensities", "RiskEvaluations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RiskEvaluations>("RiskManagementModel.FK_RiskEvaluations_RiskIntensities", "RiskEvaluations", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_Risks_RiskIntensities", "Risks")]
        public EntityCollection<Risks> Risks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Risks>("RiskManagementModel.FK_Risks_RiskIntensities", "Risks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Risks>("RiskManagementModel.FK_Risks_RiskIntensities", "Risks", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_UserRisks_RiskIntensities", "UserRisks")]
        public EntityCollection<UserRisks> UserRisks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserRisks>("RiskManagementModel.FK_UserRisks_RiskIntensities", "UserRisks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserRisks>("RiskManagementModel.FK_UserRisks_RiskIntensities", "UserRisks", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_UserRisks_RiskIntensities1", "UserRisks")]
        public EntityCollection<UserRisks> UserRisks1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserRisks>("RiskManagementModel.FK_UserRisks_RiskIntensities1", "UserRisks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserRisks>("RiskManagementModel.FK_UserRisks_RiskIntensities1", "UserRisks", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiskManagementModel", Name="RiskProbabilities")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class RiskProbabilities : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new RiskProbabilities object.
        /// </summary>
        /// <param name="riskProbabilityID">Initial value of the RiskProbabilityID property.</param>
        /// <param name="riskProbabilityTitle">Initial value of the RiskProbabilityTitle property.</param>
        /// <param name="riskProbabilityLevel">Initial value of the RiskProbabilityLevel property.</param>
        /// <param name="riskProbabilityDes">Initial value of the RiskProbabilityDes property.</param>
        /// <param name="riskProbabilitySpeed">Initial value of the RiskProbabilitySpeed property.</param>
        public static RiskProbabilities CreateRiskProbabilities(global::System.Int32 riskProbabilityID, global::System.String riskProbabilityTitle, global::System.Int32 riskProbabilityLevel, global::System.String riskProbabilityDes, global::System.String riskProbabilitySpeed)
        {
            RiskProbabilities riskProbabilities = new RiskProbabilities();
            riskProbabilities.RiskProbabilityID = riskProbabilityID;
            riskProbabilities.RiskProbabilityTitle = riskProbabilityTitle;
            riskProbabilities.RiskProbabilityLevel = riskProbabilityLevel;
            riskProbabilities.RiskProbabilityDes = riskProbabilityDes;
            riskProbabilities.RiskProbabilitySpeed = riskProbabilitySpeed;
            return riskProbabilities;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RiskProbabilityID
        {
            get
            {
                return _RiskProbabilityID;
            }
            set
            {
                if (_RiskProbabilityID != value)
                {
                    OnRiskProbabilityIDChanging(value);
                    ReportPropertyChanging("RiskProbabilityID");
                    _RiskProbabilityID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RiskProbabilityID");
                    OnRiskProbabilityIDChanged();
                }
            }
        }
        private global::System.Int32 _RiskProbabilityID;
        partial void OnRiskProbabilityIDChanging(global::System.Int32 value);
        partial void OnRiskProbabilityIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RiskProbabilityTitle
        {
            get
            {
                return _RiskProbabilityTitle;
            }
            set
            {
                OnRiskProbabilityTitleChanging(value);
                ReportPropertyChanging("RiskProbabilityTitle");
                _RiskProbabilityTitle = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RiskProbabilityTitle");
                OnRiskProbabilityTitleChanged();
            }
        }
        private global::System.String _RiskProbabilityTitle;
        partial void OnRiskProbabilityTitleChanging(global::System.String value);
        partial void OnRiskProbabilityTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RiskProbabilityLevel
        {
            get
            {
                return _RiskProbabilityLevel;
            }
            set
            {
                OnRiskProbabilityLevelChanging(value);
                ReportPropertyChanging("RiskProbabilityLevel");
                _RiskProbabilityLevel = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RiskProbabilityLevel");
                OnRiskProbabilityLevelChanged();
            }
        }
        private global::System.Int32 _RiskProbabilityLevel;
        partial void OnRiskProbabilityLevelChanging(global::System.Int32 value);
        partial void OnRiskProbabilityLevelChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RiskProbabilityDes
        {
            get
            {
                return _RiskProbabilityDes;
            }
            set
            {
                OnRiskProbabilityDesChanging(value);
                ReportPropertyChanging("RiskProbabilityDes");
                _RiskProbabilityDes = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RiskProbabilityDes");
                OnRiskProbabilityDesChanged();
            }
        }
        private global::System.String _RiskProbabilityDes;
        partial void OnRiskProbabilityDesChanging(global::System.String value);
        partial void OnRiskProbabilityDesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RiskProbabilitySpeed
        {
            get
            {
                return _RiskProbabilitySpeed;
            }
            set
            {
                OnRiskProbabilitySpeedChanging(value);
                ReportPropertyChanging("RiskProbabilitySpeed");
                _RiskProbabilitySpeed = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RiskProbabilitySpeed");
                OnRiskProbabilitySpeedChanged();
            }
        }
        private global::System.String _RiskProbabilitySpeed;
        partial void OnRiskProbabilitySpeedChanging(global::System.String value);
        partial void OnRiskProbabilitySpeedChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_RiskEvaluations_RiskProbabilities", "RiskEvaluations")]
        public EntityCollection<RiskEvaluations> RiskEvaluations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<RiskEvaluations>("RiskManagementModel.FK_RiskEvaluations_RiskProbabilities", "RiskEvaluations");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<RiskEvaluations>("RiskManagementModel.FK_RiskEvaluations_RiskProbabilities", "RiskEvaluations", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_Risks_RiskProbabilities", "Risks")]
        public EntityCollection<Risks> Risks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Risks>("RiskManagementModel.FK_Risks_RiskProbabilities", "Risks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Risks>("RiskManagementModel.FK_Risks_RiskProbabilities", "Risks", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_UserRisks_RiskProbabilities", "UserRisks")]
        public EntityCollection<UserRisks> UserRisks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserRisks>("RiskManagementModel.FK_UserRisks_RiskProbabilities", "UserRisks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserRisks>("RiskManagementModel.FK_UserRisks_RiskProbabilities", "UserRisks", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_UserRisks_RiskProbabilities1", "UserRisks")]
        public EntityCollection<UserRisks> UserRisks1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserRisks>("RiskManagementModel.FK_UserRisks_RiskProbabilities1", "UserRisks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserRisks>("RiskManagementModel.FK_UserRisks_RiskProbabilities1", "UserRisks", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiskManagementModel", Name="Risks")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Risks : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Risks object.
        /// </summary>
        /// <param name="riskID">Initial value of the RiskID property.</param>
        /// <param name="stageID">Initial value of the StageID property.</param>
        /// <param name="riskTitle">Initial value of the RiskTitle property.</param>
        /// <param name="isNormal">Initial value of the IsNormal property.</param>
        /// <param name="codeID">Initial value of the CodeID property.</param>
        public static Risks CreateRisks(global::System.Int32 riskID, global::System.Int32 stageID, global::System.String riskTitle, global::System.Boolean isNormal, global::System.Int32 codeID)
        {
            Risks risks = new Risks();
            risks.RiskID = riskID;
            risks.StageID = stageID;
            risks.RiskTitle = riskTitle;
            risks.IsNormal = isNormal;
            risks.CodeID = codeID;
            return risks;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RiskID
        {
            get
            {
                return _RiskID;
            }
            set
            {
                if (_RiskID != value)
                {
                    OnRiskIDChanging(value);
                    ReportPropertyChanging("RiskID");
                    _RiskID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RiskID");
                    OnRiskIDChanged();
                }
            }
        }
        private global::System.Int32 _RiskID;
        partial void OnRiskIDChanging(global::System.Int32 value);
        partial void OnRiskIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StageID
        {
            get
            {
                return _StageID;
            }
            set
            {
                OnStageIDChanging(value);
                ReportPropertyChanging("StageID");
                _StageID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StageID");
                OnStageIDChanged();
            }
        }
        private global::System.Int32 _StageID;
        partial void OnStageIDChanging(global::System.Int32 value);
        partial void OnStageIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RiskTitle
        {
            get
            {
                return _RiskTitle;
            }
            set
            {
                OnRiskTitleChanging(value);
                ReportPropertyChanging("RiskTitle");
                _RiskTitle = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RiskTitle");
                OnRiskTitleChanged();
            }
        }
        private global::System.String _RiskTitle;
        partial void OnRiskTitleChanging(global::System.String value);
        partial void OnRiskTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsNormal
        {
            get
            {
                return _IsNormal;
            }
            set
            {
                OnIsNormalChanging(value);
                ReportPropertyChanging("IsNormal");
                _IsNormal = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsNormal");
                OnIsNormalChanged();
            }
        }
        private global::System.Boolean _IsNormal;
        partial void OnIsNormalChanging(global::System.Boolean value);
        partial void OnIsNormalChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> RiskIntensityID
        {
            get
            {
                return _RiskIntensityID;
            }
            set
            {
                OnRiskIntensityIDChanging(value);
                ReportPropertyChanging("RiskIntensityID");
                _RiskIntensityID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RiskIntensityID");
                OnRiskIntensityIDChanged();
            }
        }
        private Nullable<global::System.Int32> _RiskIntensityID;
        partial void OnRiskIntensityIDChanging(Nullable<global::System.Int32> value);
        partial void OnRiskIntensityIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> RiskProbabilityID
        {
            get
            {
                return _RiskProbabilityID;
            }
            set
            {
                OnRiskProbabilityIDChanging(value);
                ReportPropertyChanging("RiskProbabilityID");
                _RiskProbabilityID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RiskProbabilityID");
                OnRiskProbabilityIDChanged();
            }
        }
        private Nullable<global::System.Int32> _RiskProbabilityID;
        partial void OnRiskProbabilityIDChanging(Nullable<global::System.Int32> value);
        partial void OnRiskProbabilityIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CodeID
        {
            get
            {
                return _CodeID;
            }
            set
            {
                OnCodeIDChanging(value);
                ReportPropertyChanging("CodeID");
                _CodeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CodeID");
                OnCodeIDChanged();
            }
        }
        private global::System.Int32 _CodeID;
        partial void OnCodeIDChanging(global::System.Int32 value);
        partial void OnCodeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsAcceptedByAdmin
        {
            get
            {
                return _IsAcceptedByAdmin;
            }
            set
            {
                OnIsAcceptedByAdminChanging(value);
                ReportPropertyChanging("IsAcceptedByAdmin");
                _IsAcceptedByAdmin = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsAcceptedByAdmin");
                OnIsAcceptedByAdminChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsAcceptedByAdmin;
        partial void OnIsAcceptedByAdminChanging(Nullable<global::System.Boolean> value);
        partial void OnIsAcceptedByAdminChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_ControlingWorks_Risks", "ControlingWorks")]
        public EntityCollection<ControlingWorks> ControlingWorks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ControlingWorks>("RiskManagementModel.FK_ControlingWorks_Risks", "ControlingWorks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ControlingWorks>("RiskManagementModel.FK_ControlingWorks_Risks", "ControlingWorks", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_Risks_RiskIntensities", "RiskIntensities")]
        public RiskIntensities RiskIntensities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskIntensities>("RiskManagementModel.FK_Risks_RiskIntensities", "RiskIntensities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskIntensities>("RiskManagementModel.FK_Risks_RiskIntensities", "RiskIntensities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RiskIntensities> RiskIntensitiesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskIntensities>("RiskManagementModel.FK_Risks_RiskIntensities", "RiskIntensities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RiskIntensities>("RiskManagementModel.FK_Risks_RiskIntensities", "RiskIntensities", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_Risks_RiskProbabilities", "RiskProbabilities")]
        public RiskProbabilities RiskProbabilities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskProbabilities>("RiskManagementModel.FK_Risks_RiskProbabilities", "RiskProbabilities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskProbabilities>("RiskManagementModel.FK_Risks_RiskProbabilities", "RiskProbabilities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RiskProbabilities> RiskProbabilitiesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskProbabilities>("RiskManagementModel.FK_Risks_RiskProbabilities", "RiskProbabilities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RiskProbabilities>("RiskManagementModel.FK_Risks_RiskProbabilities", "RiskProbabilities", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_Risks_Stages", "Stages")]
        public Stages Stages
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Stages>("RiskManagementModel.FK_Risks_Stages", "Stages").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Stages>("RiskManagementModel.FK_Risks_Stages", "Stages").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Stages> StagesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Stages>("RiskManagementModel.FK_Risks_Stages", "Stages");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Stages>("RiskManagementModel.FK_Risks_Stages", "Stages", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_UserRisks_Risks", "UserRisks")]
        public EntityCollection<UserRisks> UserRisks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserRisks>("RiskManagementModel.FK_UserRisks_Risks", "UserRisks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserRisks>("RiskManagementModel.FK_UserRisks_Risks", "UserRisks", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiskManagementModel", Name="Roles")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Roles : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Roles object.
        /// </summary>
        /// <param name="roleID">Initial value of the RoleID property.</param>
        /// <param name="roleTitle">Initial value of the RoleTitle property.</param>
        /// <param name="roleName">Initial value of the RoleName property.</param>
        public static Roles CreateRoles(global::System.Int32 roleID, global::System.String roleTitle, global::System.String roleName)
        {
            Roles roles = new Roles();
            roles.RoleID = roleID;
            roles.RoleTitle = roleTitle;
            roles.RoleName = roleName;
            return roles;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RoleID
        {
            get
            {
                return _RoleID;
            }
            set
            {
                if (_RoleID != value)
                {
                    OnRoleIDChanging(value);
                    ReportPropertyChanging("RoleID");
                    _RoleID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RoleID");
                    OnRoleIDChanged();
                }
            }
        }
        private global::System.Int32 _RoleID;
        partial void OnRoleIDChanging(global::System.Int32 value);
        partial void OnRoleIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RoleTitle
        {
            get
            {
                return _RoleTitle;
            }
            set
            {
                OnRoleTitleChanging(value);
                ReportPropertyChanging("RoleTitle");
                _RoleTitle = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RoleTitle");
                OnRoleTitleChanged();
            }
        }
        private global::System.String _RoleTitle;
        partial void OnRoleTitleChanging(global::System.String value);
        partial void OnRoleTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RoleName
        {
            get
            {
                return _RoleName;
            }
            set
            {
                OnRoleNameChanging(value);
                ReportPropertyChanging("RoleName");
                _RoleName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("RoleName");
                OnRoleNameChanged();
            }
        }
        private global::System.String _RoleName;
        partial void OnRoleNameChanging(global::System.String value);
        partial void OnRoleNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_Users_Roles", "Users")]
        public EntityCollection<Users> Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Users>("RiskManagementModel.FK_Users_Roles", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Users>("RiskManagementModel.FK_Users_Roles", "Users", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiskManagementModel", Name="Stages")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Stages : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Stages object.
        /// </summary>
        /// <param name="stageID">Initial value of the StageID property.</param>
        /// <param name="actID">Initial value of the ActID property.</param>
        /// <param name="codeID">Initial value of the CodeID property.</param>
        /// <param name="stageTitle">Initial value of the StageTitle property.</param>
        public static Stages CreateStages(global::System.Int32 stageID, global::System.Int32 actID, global::System.Int32 codeID, global::System.String stageTitle)
        {
            Stages stages = new Stages();
            stages.StageID = stageID;
            stages.ActID = actID;
            stages.CodeID = codeID;
            stages.StageTitle = stageTitle;
            return stages;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 StageID
        {
            get
            {
                return _StageID;
            }
            set
            {
                if (_StageID != value)
                {
                    OnStageIDChanging(value);
                    ReportPropertyChanging("StageID");
                    _StageID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("StageID");
                    OnStageIDChanged();
                }
            }
        }
        private global::System.Int32 _StageID;
        partial void OnStageIDChanging(global::System.Int32 value);
        partial void OnStageIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ActID
        {
            get
            {
                return _ActID;
            }
            set
            {
                OnActIDChanging(value);
                ReportPropertyChanging("ActID");
                _ActID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ActID");
                OnActIDChanged();
            }
        }
        private global::System.Int32 _ActID;
        partial void OnActIDChanging(global::System.Int32 value);
        partial void OnActIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CodeID
        {
            get
            {
                return _CodeID;
            }
            set
            {
                OnCodeIDChanging(value);
                ReportPropertyChanging("CodeID");
                _CodeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CodeID");
                OnCodeIDChanged();
            }
        }
        private global::System.Int32 _CodeID;
        partial void OnCodeIDChanging(global::System.Int32 value);
        partial void OnCodeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String StageTitle
        {
            get
            {
                return _StageTitle;
            }
            set
            {
                OnStageTitleChanging(value);
                ReportPropertyChanging("StageTitle");
                _StageTitle = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("StageTitle");
                OnStageTitleChanged();
            }
        }
        private global::System.String _StageTitle;
        partial void OnStageTitleChanging(global::System.String value);
        partial void OnStageTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsAcceptedByAdmin
        {
            get
            {
                return _IsAcceptedByAdmin;
            }
            set
            {
                OnIsAcceptedByAdminChanging(value);
                ReportPropertyChanging("IsAcceptedByAdmin");
                _IsAcceptedByAdmin = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsAcceptedByAdmin");
                OnIsAcceptedByAdminChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsAcceptedByAdmin;
        partial void OnIsAcceptedByAdminChanging(Nullable<global::System.Boolean> value);
        partial void OnIsAcceptedByAdminChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_Stages_Acts", "Acts")]
        public Acts Acts
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Acts>("RiskManagementModel.FK_Stages_Acts", "Acts").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Acts>("RiskManagementModel.FK_Stages_Acts", "Acts").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Acts> ActsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Acts>("RiskManagementModel.FK_Stages_Acts", "Acts");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Acts>("RiskManagementModel.FK_Stages_Acts", "Acts", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_Risks_Stages", "Risks")]
        public EntityCollection<Risks> Risks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Risks>("RiskManagementModel.FK_Risks_Stages", "Risks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Risks>("RiskManagementModel.FK_Risks_Stages", "Risks", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiskManagementModel", Name="UserRisks")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class UserRisks : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new UserRisks object.
        /// </summary>
        /// <param name="userRiskID">Initial value of the UserRiskID property.</param>
        /// <param name="userID_Company">Initial value of the UserID_Company property.</param>
        /// <param name="riskID">Initial value of the RiskID property.</param>
        /// <param name="riskIntensityID">Initial value of the RiskIntensityID property.</param>
        /// <param name="riskProbabilityID">Initial value of the RiskProbabilityID property.</param>
        public static UserRisks CreateUserRisks(global::System.Int32 userRiskID, global::System.Int32 userID_Company, global::System.Int32 riskID, global::System.Int32 riskIntensityID, global::System.Int32 riskProbabilityID)
        {
            UserRisks userRisks = new UserRisks();
            userRisks.UserRiskID = userRiskID;
            userRisks.UserID_Company = userID_Company;
            userRisks.RiskID = riskID;
            userRisks.RiskIntensityID = riskIntensityID;
            userRisks.RiskProbabilityID = riskProbabilityID;
            return userRisks;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserRiskID
        {
            get
            {
                return _UserRiskID;
            }
            set
            {
                if (_UserRiskID != value)
                {
                    OnUserRiskIDChanging(value);
                    ReportPropertyChanging("UserRiskID");
                    _UserRiskID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserRiskID");
                    OnUserRiskIDChanged();
                }
            }
        }
        private global::System.Int32 _UserRiskID;
        partial void OnUserRiskIDChanging(global::System.Int32 value);
        partial void OnUserRiskIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserID_Company
        {
            get
            {
                return _UserID_Company;
            }
            set
            {
                OnUserID_CompanyChanging(value);
                ReportPropertyChanging("UserID_Company");
                _UserID_Company = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserID_Company");
                OnUserID_CompanyChanged();
            }
        }
        private global::System.Int32 _UserID_Company;
        partial void OnUserID_CompanyChanging(global::System.Int32 value);
        partial void OnUserID_CompanyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RiskID
        {
            get
            {
                return _RiskID;
            }
            set
            {
                OnRiskIDChanging(value);
                ReportPropertyChanging("RiskID");
                _RiskID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RiskID");
                OnRiskIDChanged();
            }
        }
        private global::System.Int32 _RiskID;
        partial void OnRiskIDChanging(global::System.Int32 value);
        partial void OnRiskIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RiskIntensityID
        {
            get
            {
                return _RiskIntensityID;
            }
            set
            {
                OnRiskIntensityIDChanging(value);
                ReportPropertyChanging("RiskIntensityID");
                _RiskIntensityID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RiskIntensityID");
                OnRiskIntensityIDChanged();
            }
        }
        private global::System.Int32 _RiskIntensityID;
        partial void OnRiskIntensityIDChanging(global::System.Int32 value);
        partial void OnRiskIntensityIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RiskProbabilityID
        {
            get
            {
                return _RiskProbabilityID;
            }
            set
            {
                OnRiskProbabilityIDChanging(value);
                ReportPropertyChanging("RiskProbabilityID");
                _RiskProbabilityID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RiskProbabilityID");
                OnRiskProbabilityIDChanged();
            }
        }
        private global::System.Int32 _RiskProbabilityID;
        partial void OnRiskProbabilityIDChanging(global::System.Int32 value);
        partial void OnRiskProbabilityIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> RiskIntensityID_AfterCO
        {
            get
            {
                return _RiskIntensityID_AfterCO;
            }
            set
            {
                OnRiskIntensityID_AfterCOChanging(value);
                ReportPropertyChanging("RiskIntensityID_AfterCO");
                _RiskIntensityID_AfterCO = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RiskIntensityID_AfterCO");
                OnRiskIntensityID_AfterCOChanged();
            }
        }
        private Nullable<global::System.Int32> _RiskIntensityID_AfterCO;
        partial void OnRiskIntensityID_AfterCOChanging(Nullable<global::System.Int32> value);
        partial void OnRiskIntensityID_AfterCOChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> RiskProbabilityID_AfterCO
        {
            get
            {
                return _RiskProbabilityID_AfterCO;
            }
            set
            {
                OnRiskProbabilityID_AfterCOChanging(value);
                ReportPropertyChanging("RiskProbabilityID_AfterCO");
                _RiskProbabilityID_AfterCO = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RiskProbabilityID_AfterCO");
                OnRiskProbabilityID_AfterCOChanged();
            }
        }
        private Nullable<global::System.Int32> _RiskProbabilityID_AfterCO;
        partial void OnRiskProbabilityID_AfterCOChanging(Nullable<global::System.Int32> value);
        partial void OnRiskProbabilityID_AfterCOChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsCheckBySup
        {
            get
            {
                return _IsCheckBySup;
            }
            set
            {
                OnIsCheckBySupChanging(value);
                ReportPropertyChanging("IsCheckBySup");
                _IsCheckBySup = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsCheckBySup");
                OnIsCheckBySupChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsCheckBySup;
        partial void OnIsCheckBySupChanging(Nullable<global::System.Boolean> value);
        partial void OnIsCheckBySupChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsCheckByAdmin
        {
            get
            {
                return _IsCheckByAdmin;
            }
            set
            {
                OnIsCheckByAdminChanging(value);
                ReportPropertyChanging("IsCheckByAdmin");
                _IsCheckByAdmin = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsCheckByAdmin");
                OnIsCheckByAdminChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsCheckByAdmin;
        partial void OnIsCheckByAdminChanging(Nullable<global::System.Boolean> value);
        partial void OnIsCheckByAdminChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> UserID_Sup
        {
            get
            {
                return _UserID_Sup;
            }
            set
            {
                OnUserID_SupChanging(value);
                ReportPropertyChanging("UserID_Sup");
                _UserID_Sup = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("UserID_Sup");
                OnUserID_SupChanged();
            }
        }
        private Nullable<global::System.Int32> _UserID_Sup;
        partial void OnUserID_SupChanging(Nullable<global::System.Int32> value);
        partial void OnUserID_SupChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> IsNotAvailable
        {
            get
            {
                return _IsNotAvailable;
            }
            set
            {
                OnIsNotAvailableChanging(value);
                ReportPropertyChanging("IsNotAvailable");
                _IsNotAvailable = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsNotAvailable");
                OnIsNotAvailableChanged();
            }
        }
        private Nullable<global::System.Boolean> _IsNotAvailable;
        partial void OnIsNotAvailableChanging(Nullable<global::System.Boolean> value);
        partial void OnIsNotAvailableChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_UserRisks_RiskIntensities", "RiskIntensities")]
        public RiskIntensities RiskIntensities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskIntensities>("RiskManagementModel.FK_UserRisks_RiskIntensities", "RiskIntensities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskIntensities>("RiskManagementModel.FK_UserRisks_RiskIntensities", "RiskIntensities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RiskIntensities> RiskIntensitiesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskIntensities>("RiskManagementModel.FK_UserRisks_RiskIntensities", "RiskIntensities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RiskIntensities>("RiskManagementModel.FK_UserRisks_RiskIntensities", "RiskIntensities", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_UserRisks_RiskIntensities1", "RiskIntensities")]
        public RiskIntensities RiskIntensities1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskIntensities>("RiskManagementModel.FK_UserRisks_RiskIntensities1", "RiskIntensities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskIntensities>("RiskManagementModel.FK_UserRisks_RiskIntensities1", "RiskIntensities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RiskIntensities> RiskIntensities1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskIntensities>("RiskManagementModel.FK_UserRisks_RiskIntensities1", "RiskIntensities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RiskIntensities>("RiskManagementModel.FK_UserRisks_RiskIntensities1", "RiskIntensities", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_UserRisks_RiskProbabilities", "RiskProbabilities")]
        public RiskProbabilities RiskProbabilities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskProbabilities>("RiskManagementModel.FK_UserRisks_RiskProbabilities", "RiskProbabilities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskProbabilities>("RiskManagementModel.FK_UserRisks_RiskProbabilities", "RiskProbabilities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RiskProbabilities> RiskProbabilitiesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskProbabilities>("RiskManagementModel.FK_UserRisks_RiskProbabilities", "RiskProbabilities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RiskProbabilities>("RiskManagementModel.FK_UserRisks_RiskProbabilities", "RiskProbabilities", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_UserRisks_RiskProbabilities1", "RiskProbabilities")]
        public RiskProbabilities RiskProbabilities1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskProbabilities>("RiskManagementModel.FK_UserRisks_RiskProbabilities1", "RiskProbabilities").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskProbabilities>("RiskManagementModel.FK_UserRisks_RiskProbabilities1", "RiskProbabilities").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<RiskProbabilities> RiskProbabilities1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<RiskProbabilities>("RiskManagementModel.FK_UserRisks_RiskProbabilities1", "RiskProbabilities");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<RiskProbabilities>("RiskManagementModel.FK_UserRisks_RiskProbabilities1", "RiskProbabilities", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_UserRisks_Risks", "Risks")]
        public Risks Risks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Risks>("RiskManagementModel.FK_UserRisks_Risks", "Risks").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Risks>("RiskManagementModel.FK_UserRisks_Risks", "Risks").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Risks> RisksReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Risks>("RiskManagementModel.FK_UserRisks_Risks", "Risks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Risks>("RiskManagementModel.FK_UserRisks_Risks", "Risks", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_UserRisks_Users", "Users")]
        public Users Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("RiskManagementModel.FK_UserRisks_Users", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("RiskManagementModel.FK_UserRisks_Users", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Users> UsersReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("RiskManagementModel.FK_UserRisks_Users", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Users>("RiskManagementModel.FK_UserRisks_Users", "Users", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_UserRisks_Users1", "Users")]
        public Users Users1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("RiskManagementModel.FK_UserRisks_Users1", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("RiskManagementModel.FK_UserRisks_Users1", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Users> Users1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("RiskManagementModel.FK_UserRisks_Users1", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Users>("RiskManagementModel.FK_UserRisks_Users1", "Users", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="RiskManagementModel", Name="Users")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Users : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Users object.
        /// </summary>
        /// <param name="userID">Initial value of the UserID property.</param>
        /// <param name="roleID">Initial value of the RoleID property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="family">Initial value of the Family property.</param>
        /// <param name="username">Initial value of the Username property.</param>
        /// <param name="password">Initial value of the Password property.</param>
        /// <param name="email">Initial value of the Email property.</param>
        public static Users CreateUsers(global::System.Int32 userID, global::System.Int32 roleID, global::System.String name, global::System.String family, global::System.String username, global::System.String password, global::System.String email)
        {
            Users users = new Users();
            users.UserID = userID;
            users.RoleID = roleID;
            users.Name = name;
            users.Family = family;
            users.Username = username;
            users.Password = password;
            users.Email = email;
            return users;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserID
        {
            get
            {
                return _UserID;
            }
            set
            {
                if (_UserID != value)
                {
                    OnUserIDChanging(value);
                    ReportPropertyChanging("UserID");
                    _UserID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserID");
                    OnUserIDChanged();
                }
            }
        }
        private global::System.Int32 _UserID;
        partial void OnUserIDChanging(global::System.Int32 value);
        partial void OnUserIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RoleID
        {
            get
            {
                return _RoleID;
            }
            set
            {
                OnRoleIDChanging(value);
                ReportPropertyChanging("RoleID");
                _RoleID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RoleID");
                OnRoleIDChanged();
            }
        }
        private global::System.Int32 _RoleID;
        partial void OnRoleIDChanging(global::System.Int32 value);
        partial void OnRoleIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Family
        {
            get
            {
                return _Family;
            }
            set
            {
                OnFamilyChanging(value);
                ReportPropertyChanging("Family");
                _Family = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Family");
                OnFamilyChanged();
            }
        }
        private global::System.String _Family;
        partial void OnFamilyChanging(global::System.String value);
        partial void OnFamilyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Username
        {
            get
            {
                return _Username;
            }
            set
            {
                OnUsernameChanging(value);
                ReportPropertyChanging("Username");
                _Username = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Username");
                OnUsernameChanged();
            }
        }
        private global::System.String _Username;
        partial void OnUsernameChanging(global::System.String value);
        partial void OnUsernameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Email
        {
            get
            {
                return _Email;
            }
            set
            {
                OnEmailChanging(value);
                ReportPropertyChanging("Email");
                _Email = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Email");
                OnEmailChanged();
            }
        }
        private global::System.String _Email;
        partial void OnEmailChanging(global::System.String value);
        partial void OnEmailChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
                OnPhoneChanging(value);
                ReportPropertyChanging("Phone");
                _Phone = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Phone");
                OnPhoneChanged();
            }
        }
        private global::System.String _Phone;
        partial void OnPhoneChanging(global::System.String value);
        partial void OnPhoneChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Address
        {
            get
            {
                return _Address;
            }
            set
            {
                OnAddressChanging(value);
                ReportPropertyChanging("Address");
                _Address = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Address");
                OnAddressChanged();
            }
        }
        private global::System.String _Address;
        partial void OnAddressChanging(global::System.String value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CompanyName
        {
            get
            {
                return _CompanyName;
            }
            set
            {
                OnCompanyNameChanging(value);
                ReportPropertyChanging("CompanyName");
                _CompanyName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CompanyName");
                OnCompanyNameChanged();
            }
        }
        private global::System.String _CompanyName;
        partial void OnCompanyNameChanging(global::System.String value);
        partial void OnCompanyNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CompanyProjectName
        {
            get
            {
                return _CompanyProjectName;
            }
            set
            {
                OnCompanyProjectNameChanging(value);
                ReportPropertyChanging("CompanyProjectName");
                _CompanyProjectName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CompanyProjectName");
                OnCompanyProjectNameChanged();
            }
        }
        private global::System.String _CompanyProjectName;
        partial void OnCompanyProjectNameChanging(global::System.String value);
        partial void OnCompanyProjectNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CompanyPosition
        {
            get
            {
                return _CompanyPosition;
            }
            set
            {
                OnCompanyPositionChanging(value);
                ReportPropertyChanging("CompanyPosition");
                _CompanyPosition = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("CompanyPosition");
                OnCompanyPositionChanged();
            }
        }
        private global::System.String _CompanyPosition;
        partial void OnCompanyPositionChanging(global::System.String value);
        partial void OnCompanyPositionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> fk_CompanyUserID
        {
            get
            {
                return _fk_CompanyUserID;
            }
            set
            {
                Onfk_CompanyUserIDChanging(value);
                ReportPropertyChanging("fk_CompanyUserID");
                _fk_CompanyUserID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("fk_CompanyUserID");
                Onfk_CompanyUserIDChanged();
            }
        }
        private Nullable<global::System.Int32> _fk_CompanyUserID;
        partial void Onfk_CompanyUserIDChanging(Nullable<global::System.Int32> value);
        partial void Onfk_CompanyUserIDChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_Users_Roles", "Roles")]
        public Roles Roles
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Roles>("RiskManagementModel.FK_Users_Roles", "Roles").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Roles>("RiskManagementModel.FK_Users_Roles", "Roles").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Roles> RolesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Roles>("RiskManagementModel.FK_Users_Roles", "Roles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Roles>("RiskManagementModel.FK_Users_Roles", "Roles", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_Users_Users", "Users1")]
        public EntityCollection<Users> Users1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Users>("RiskManagementModel.FK_Users_Users", "Users1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Users>("RiskManagementModel.FK_Users_Users", "Users1", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_Users_Users", "Users")]
        public Users Users2
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("RiskManagementModel.FK_Users_Users", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("RiskManagementModel.FK_Users_Users", "Users").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Users> Users2Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("RiskManagementModel.FK_Users_Users", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Users>("RiskManagementModel.FK_Users_Users", "Users", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_UserRisks_Users", "UserRisks")]
        public EntityCollection<UserRisks> UserRisks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserRisks>("RiskManagementModel.FK_UserRisks_Users", "UserRisks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserRisks>("RiskManagementModel.FK_UserRisks_Users", "UserRisks", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("RiskManagementModel", "FK_UserRisks_Users1", "UserRisks")]
        public EntityCollection<UserRisks> UserRisks1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<UserRisks>("RiskManagementModel.FK_UserRisks_Users1", "UserRisks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<UserRisks>("RiskManagementModel.FK_UserRisks_Users1", "UserRisks", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
